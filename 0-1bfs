class Solution {
private:
    bool valid(vector<vector<int>>& grid, int i, int j){
        return i >= 0 && i < grid.size() && j >=0 && j < grid[0].size();
    }
public:
    int minimumObstacles(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        deque<pair<int,int>>q;
        vector<vector<int>>dist(n, vector<int>(m, INT_MAX));
        dist[0][0] = 0;
        q.push_back({0,0});
        int dx[] = {0, 0, 1, -1};
        int dy[] = {1, -1, 0, 0};        
        while(!q.empty()){
            auto [i, j] = q.front();
            q.pop_front();
            for(int k = 0; k < 4; k++){
                int ni = i + dx[k], nj = j + dy[k];
                if(valid(grid, ni, nj) && dist[i][j] + grid[i][j] < dist[ni][nj]){
                    dist[ni][nj] = dist[i][j] + grid[i][j];
                    if(grid[i][j] == 0){
                        q.push_front({ni, nj});
                    }else{
                        q.push_back({ni, nj});
                    }
                }
            }
        }
        return dist[n-1][m-1];
    }
};
