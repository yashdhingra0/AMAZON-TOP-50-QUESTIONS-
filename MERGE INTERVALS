
class Solution {
    
    static bool cmp( const vector<int>& v1,const vector<int>& v2 ) {
        return v1[0] < v2[0];
}    
    
public:
    vector<vector<int>> merge(vector<vector<int>>& a) {
        sort(a.begin(),a.end(),cmp);
        vector<vector<int>>v;
        int n=a.size();
        int start=a[0][0];
        int end=a[0][1];
        for(int i=1;i<n;i++){
            int start1=a[i][0];
            int end1=a[i][1];
            if(end<start1){
            v.push_back({start,end});
              start=start1;
              end=end1;
            }
            else if(end1>=end){
                end=end1;
                
            }
               }
        v.push_back({start,end});
            return v;
            }
};

//////////////////////


struct Interval 
{ 
    int s, e; 
}; 
 
// Function used in sort 
bool mycomp(Interval a, Interval b) 
{ return a.s < b.s; } 
 
void mergeIntervals(Interval arr[], int n) 
{ 
    // Sort Intervals in increasing order of
    // start time
    sort(arr, arr+n, mycomp); 
 
    int index = 0; // Stores index of last element 
    // in output array (modified arr[]) 
 
    // Traverse all input Intervals 
    for (int i=1; i<n; i++) 
    { 
        // If this is not first Interval and overlaps 
        // with the previous one 
        if (arr[index].e >=  arr[i].s) 
        { 
               // Merge previous and current Intervals 
            arr[index].e = max(arr[index].e, arr[i].e); 
            arr[index].s = min(arr[index].s, arr[i].s); 
        } 
        else {
            index++;
            arr[index] = arr[i]; 
        }    
    } 
 
    // Now arr[0..index-1] stores the merged Intervals 
    cout << "\n The Merged Intervals are: "; 
    for (int i = 0; i <= index; i++) 
        cout << "[" << arr[i].s << ", " << arr[i].e << "] "; 
} 
