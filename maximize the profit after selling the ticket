Given array seats[] where seat[i] is the number of vacant seats in the ith row in a stadium for a cricket match. There are N people in a queue waiting to buy the tickets. Each seat costs equal to the number of vacant seats in the row it belongs to. The task is to maximize the profit by selling the tickets to N people.

Examples: 

    Input: seats[] = {2, 1, 1}, N = 3 
    Output: 4 
    Person 1: Sell the seat in the row with 
    2 vacant seats, seats = {1, 1, 1} 
    Person 2: All the rows have 1 vacant 
    seat each, seats[] = {0, 1, 1} 
    Person 3: seats[] = {0, 0, 1}

    Input: seats[] = {2, 3, 4, 5, 1}, N = 6 
    Output: 22 
    
    int maxProfit(int seats[], int k, int n)
{
 
    // Push all the vacant seats
    // in a priority queue
    priority_queue<int> pq;
    for (int i = 0; i < k; i++)
        pq.push(seats[i]);
 
    // To store the maximized profit
    int profit = 0;
 
    // To count the people that
    // have been sold a ticket
    int c = 0;
    while (c < n) {
 
        // Get the maximum number of
        // vacant seats for any row
        int top = pq.top();
 
        // Remove it from the queue
        pq.pop();
 
        // If there are no vacant seats
        if (top == 0)
            break;
 
        // Update the profit
        profit = profit + top;
 
        // Push the updated status of the
        // vacant seats in the current row
        pq.push(top - 1);
 
        // Update the count of persons
        c++;
    }
    return profit;
}
