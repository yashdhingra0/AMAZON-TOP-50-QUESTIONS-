class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(),wordList.end());
        queue<vector<string>> q;
        q.push({beginWord});
        unordered_set<string> visited;
        vector<vector<string>> ans;
        
        while(!q.empty())
        {
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                vector<string> currPath = q.front();
                q.pop();
                int m = beginWord.size();
                for(int j=0;j<m;j++)
                {
                    string temp=currPath.back();
                    char c= temp[j];
                    for(int k=0;k<26;k++)
                    {
                        temp[j]='a'+k;
                        if(dict.find(temp)!=dict.end())
                        {
                            vector<string> newPath=currPath;
                            newPath.push_back(temp);
                            visited.insert(temp);
                            if(temp==endWord)
                                ans.push_back(newPath);
                            else
                                q.push(newPath);
                        }
                    }
                    temp[j]=c;
                }
            }
         
            for(auto& str:visited)
            {
                dict.erase(str);
            }
        }
        return ans;
    }
};
