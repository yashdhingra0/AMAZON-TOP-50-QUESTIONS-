class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int dir[4]={-1,0,1,0};
        int dir1[4]={0,-1,0,1};
        queue<pair<int,int>>q;
        int ans=-1;
        int m=grid.size();
        int n=grid[0].size();
        int fresh=0;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2)
                {
                    q.push({i,j});
                }
                else if(grid[i][j]==1)
                {
                    fresh++;
                }
            }
        }
        
        while(!q.empty()){
            int size=q.size();
                while(size--){
                    auto p=q.front();
                    q.pop();
                    
                    for(int i=0;i<4;i++){
                        int r=p.first+ dir[i];
                        int c=p.second+ dir1[i];
                        
                        if(r>=0 && r<m && c>=0 && c<n && grid[r][c]==1)
                    {
                        grid[r][c]=2;
                            q.push({r,c});
                            fresh--;
                    }
                }
                }
                    ans++;
            
            
  }
            //ans++;
            if(fresh>0) return -1; //if fresh>0 that means there are fresh oranges left
        if(ans==-1) return 0; //we initialised with -1, so if there were no oranges it'd take 0 mins.
        return ans;
        
    }
};
