Example 1:
Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

class Solution {
public:
    int count =0;
    
    int solve(int row, int col, vector<vector<int>> &dp){
        
        
        if(row==0 && col==0)
        {
            
            return 1;
        }
        if(row<0 || col<0){
            return 0;
        }
        
        if(dp[row][col]!=-1){
            return dp[row][col];
        }
    
     return  dp[row][col]=  solve(row-1,col,dp)+ solve(row,col-1,dp);
        }
        
        
    
    int uniquePaths(int m, int n) {
        
    vector<vector<int>>dp(m,vector<int>(n,-1));
       return  solve(m-1,n-1,dp);
        
        return dp[m-1][n-1];
    }
};
