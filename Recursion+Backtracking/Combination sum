nput: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

class Solution {
public:
    
    void solve(int i , vector<int>&candidates , int target , vector<vector<int>>&ans, vector<int> &temp)
    {
        if(target==0)
        {
            ans.push_back(temp);
            return;
        }
        
        if(target<0)
            return;
        if(i==candidates.size())return;
        solve(i+1,candidates,target,ans,temp);
        temp.push_back(candidates[i]);
        solve(i,candidates,target-candidates[i],ans,temp);
        temp.pop_back();
        
        
        
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>temp;
        solve(0,candidates,target,ans,temp);
            return ans;
        
    }
};
