Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true


class Solution {
public:
    
    bool dfs(int i, vector<vector<char>>& board, string word,vector<vector<bool>>&vis, int x , int y){
        
         int m=board.size();
        int n=board[0].size();
        
        if(i==word.size())
            return true;
     
        vis[x][y]=1;
        
        
        int dirx[]={-1,0,1,0};
        int diry[]={0,-1,0,1};
        
        for(int k=0;k<4;k++){
            int r=x+dirx[k];
            int c=y+diry[k];
            
            if(r>=0 && r<m && c>=0 && c<n && word[i]==board[r][c] && !vis[r][c] && dfs(i+1,board,word,vis,r,c))
            {
               return true;
            }
            
        }
        vis[x][y]=0;
        return false;
        
        
    }
    bool exist(vector<vector<char>>& board, string word) {
        int m=board.size();
        int n=board[0].size();
        vector<vector<bool>>vis(m,vector<bool>(n,0));
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]==word[0] && dfs(1,board,word,vis,i,j))
                  return true;
                
            }
        }
        
        return false;
        
    }
};
