Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

class Solution {
public:
    
    void solve(int index , vector<int>&candidates , int target , vector<vector<int>>&ans, vector<int> &temp)
    {
        if(target==0)
        {
            ans.push_back(temp);
            return;
        }
        
        if(target<0)
            return;
        if(index==candidates.size())return;
        for(int i = index; i < candidates.size(); i++){
            if(i != index && candidates[i]==candidates[i-1])             
                continue;
       // solve(i+1,candidates,target,ans,temp);
        temp.push_back(candidates[i]);
        solve(index+1,candidates,target-candidates[i],ans,temp);
          target+candidates[i];
        temp.pop_back();
        
        
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        sort(candidates.begin(), candidates.end());
        vector<int>temp;
        solve(0,candidates,target,ans,temp);
            return ans;
        
    }
};
