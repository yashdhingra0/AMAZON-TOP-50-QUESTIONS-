Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

0 means clear...
1 means obstacle...

class Solution {
public:
    int count =0;
    
    int solve(int row, int col, vector<vector<int>> &dp,vector<vector<int>>& v){
        
        
        if(row==0 && col==0 && v[row][col]!=1)
        {
         return 1;
        }
        if(row<0 || col<0 || v[row][col]==1){
            return 0;
        }
        
        if(dp[row][col]!=-1){
            return dp[row][col];
        }
        
        return dp[row][col]=solve(row-1,col,dp,v)+solve(row,col-1,dp,v);
        }
        
        
    
   int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
       int m=obstacleGrid.size();
       int n=obstacleGrid[0].size();
       
      
        
       vector<vector<int>>dp(m,vector<int>(n,-1));
       return  solve(m-1,n-1,dp,obstacleGrid);
       
       
        return dp[m-1][n-1];
    }
};
