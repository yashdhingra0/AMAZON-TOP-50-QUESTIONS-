Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1


class Solution {
public:
    int count=0;
    
    void solve(int index, vector<int>&v)
    {
        
        if(index==v.size()){
            count++;
           // return;
        }
         for(int i=index;i<v.size();i++){
         swap(v[i],v[index]);
         if(v[index]%(index+1)==0 || (index+1)%v[index]==0 ) solve(index+1,v);
        swap(v[i],v[index]);
        
    }}
    int countArrangement(int n) {
        vector<int>v;
        for(int i=1;i<=n;i++){
            v.push_back(i);
        }
        solve(0,v);
        return count;
    }
};
